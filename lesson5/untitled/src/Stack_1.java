import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class Stack_1 {
    public static void main(String[] args) {
        /*
        Написать программу, определяющую правильность расстановки скобок в выражении.
        Пример 1: a+(d*3) - истина
        Пример 2: [a+(1]*3) - ложь
        Пример 3: [6+(3*3)] - истина
        Пример 4: {a}[+]{(d*3)} - истина
        Пример 5: <{a}+{(d*3)}> - истина
        Пример 6: {a+]}{(d*3)} - ложь
         */
        System.out.println(ex2("<{a}+{(d*3)}>"));
    }
    static boolean ex2(String line){ //создадим boolean метод, кото рый принимает в себя параметр String line

        Stack<Character> stack = new Stack<>(); //создаем экземпляр класса Stack, в который будут помещать ключи,
        // определим ниже, что ключами будут являться открывающиеся скобки.
        char[] c1 = line.toCharArray(); //преобразовываем нашу строку в массив символов
        Map<Character, Character> map = new HashMap<>(); //создаем экземпляр классов map,
        // в котором находятся пары ключ:значение
        map.put('(',')');
        map.put('[',']');
        map.put('{','}');
        map.put('<','>');

        //Объявляем цикл for, в котором пройдемся по массиву символов c1.
        //Если на пути встречаем открывающуюся скобку, а выше определили, что открывающиеся скобки = ключ, то проверяем,
        // есть ли такой ключ в map. Если есть, то помещаем его в stack.

        for (int i = 0; i < c1.length; i++){ //
            if(map.containsKey(c1[i])){ //проверяем, наличие ключа в map
                stack.push(c1[i]);
            }
        //Если на пути встретили закрывающуюся скобку, которая, по условию == значение, то так же сравниваем ее со
            // значением в map.
            //В 41 строке проверяем, пустой ли stack, если пусто, то возвращаем false, если нет,
            // то достаем методом pop из stack последний элемент и передаем его аргументов в метод get,
            // который, в свою очередь возвращает нам значение по ключу (ключ мы получили с помощью pop из stack).
            //И сравниваем полученное значение из map со встреченной нами скобкой. Если они не равны, то возвращаем false.
            //Если они равны, возвращаем true.
            if(map.containsValue(c1[i])){
                if(stack.isEmpty() || map.get(stack.pop()) != c1[i]){
                    return false;
                }

            }
        }
        return stack.isEmpty();

    }
}
